{"version":3,"names":["floatedCss","Floated","titleSlotEl","observer","observeImageSrcChange","imgElement","callback","console","log","HTMLImageElement","Error","this","MutationObserver","mutations","forEach","mutation","type","attributeName","src","observe","attributes","attributeFilter","componentDidLoad","nodes","assignedElements","flatten","img","newSrc","hostEl","style","setProperty","disconnectedCallback","disconnect","render","h","Host","key","class","name","ref","el"],"sources":["src/components/floated/floated.scss?tag=mt-floated&encapsulation=scoped","src/components/floated/floated.tsx"],"sourcesContent":["$mt-breakpoints: (\r\n  sm: 576px,\r\n  md: 768px,\r\n  lg: 992px,\r\n  xl: 1200px,\r\n  xxl: 1400px,\r\n);\r\n\r\n:host {\r\n  --mt-imagem-floated-image: null;\r\n  --mt-imagem-floated-direction: null;\r\n  --mt-imagem-floated-margin: null;\r\n  display: block;\r\n\r\n  &::after {\r\n    content: '';\r\n    display: table; /* or block */\r\n    clear: both;\r\n  }\r\n}\r\n\r\n::slotted(img) {\r\n  shape-outside: var(--mt-imagem-floated-image);\r\n  float: var(--mt-imagem-floated-direction);\r\n  margin: var(--mt-imagem-floated-margin);\r\n  max-width: 100%;\r\n}\r\n","import { Component, h, Host, Element } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'mt-floated',\r\n  styleUrl: 'floated.scss',\r\n  scoped: true,\r\n})\r\nexport class Floated {\r\n  @Element() hostEl!: HTMLElement;\r\n  private titleSlotEl!: HTMLSlotElement;\r\n\r\n  observer;\r\n\r\n  observeImageSrcChange(imgElement, callback) {\r\n    console.log(imgElement);\r\n    if (!(imgElement instanceof HTMLImageElement)) {\r\n      throw new Error('Target must be an <img> element');\r\n    }\r\n\r\n    this.observer = new MutationObserver(mutations => {\r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === 'attributes' && mutation.attributeName === 'src') {\r\n          callback(imgElement.src);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.observer.observe(imgElement, {\r\n      attributes: true, // watch attributes\r\n      attributeFilter: ['src'], // only watch src\r\n    });\r\n\r\n    return this.observer; // so you can later disconnect if needed\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.titleSlotEl) {\r\n      const nodes = this.titleSlotEl.assignedElements({ flatten: true });\r\n      const img = nodes[0];\r\n\r\n      this.observeImageSrcChange(img, newSrc => {\r\n        this.hostEl.style.setProperty('--mt-imagem-floated-image', newSrc);\r\n      });\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class=\"mt-floated\">\r\n        <div>\r\n          <slot\r\n            name=\"image\"\r\n            ref={el => (this.titleSlotEl = el as HTMLSlotElement)}\r\n          ></slot>\r\n          <slot name=\"text\"></slot>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"yDAAA,MAAMA,EAAa,iW,MCONC,EAAO,M,qDAEVC,YAERC,SAEA,qBAAAC,CAAsBC,EAAYC,GAChCC,QAAQC,IAAIH,GACZ,KAAMA,aAAsBI,kBAAmB,CAC7C,MAAM,IAAIC,MAAM,kC,CAGlBC,KAAKR,SAAW,IAAIS,kBAAiBC,IACnCA,EAAUC,SAAQC,IAChB,GAAIA,EAASC,OAAS,cAAgBD,EAASE,gBAAkB,MAAO,CACtEX,EAASD,EAAWa,I,IAEtB,IAGJP,KAAKR,SAASgB,QAAQd,EAAY,CAChCe,WAAY,KACZC,gBAAiB,CAAC,SAGpB,OAAOV,KAAKR,Q,CAGd,gBAAAmB,GACE,GAAIX,KAAKT,YAAa,CACpB,MAAMqB,EAAQZ,KAAKT,YAAYsB,iBAAiB,CAAEC,QAAS,OAC3D,MAAMC,EAAMH,EAAM,GAElBZ,KAAKP,sBAAsBsB,GAAKC,IAC9BhB,KAAKiB,OAAOC,MAAMC,YAAY,4BAA6BH,EAAO,G,EAKxE,oBAAAI,GACEpB,KAAKR,SAAS6B,Y,CAGhB,MAAAC,GACE,OACEC,EAACC,EAAK,CAAAC,IAAA,2CAAAC,MAAM,cACVH,EAAA,OAAAE,IAAA,4CACEF,EAAA,QAAAE,IAAA,2CACEE,KAAK,QACLC,IAAKC,GAAO7B,KAAKT,YAAcsC,IAEjCN,EAAA,QAAAE,IAAA,2CAAME,KAAK,U","ignoreList":[]}