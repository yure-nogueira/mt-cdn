{"version":3,"file":"floated.js","sourceRoot":"","sources":["../../../src/components/floated/floated.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAO5D,MAAM,OAAO,OAAO;IACP,MAAM,CAAe;IACxB,WAAW,CAAmB;IAEtC,QAAQ,CAAC;IAET,qBAAqB,CAAC,UAAU,EAAE,QAAQ;QACxC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,IAAI,CAAC,CAAC,UAAU,YAAY,gBAAgB,CAAC,EAAE,CAAC;YAC9C,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,EAAE;YAC/C,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC3B,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,QAAQ,CAAC,aAAa,KAAK,KAAK,EAAE,CAAC;oBACvE,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBAC3B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE;YAChC,UAAU,EAAE,IAAI,EAAE,mBAAmB;YACrC,eAAe,EAAE,CAAC,KAAK,CAAC,EAAE,iBAAiB;SAC5C,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,wCAAwC;IAChE,CAAC;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YACnE,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAErB,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE;gBACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,2BAA2B,EAAE,MAAM,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,YAAY;YACtB;gBACE,6DACE,IAAI,EAAC,OAAO,EACZ,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,EAAqB,CAAC,GAC/C;gBACR,6DAAM,IAAI,EAAC,MAAM,GAAQ,CACrB,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Host, Element } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'mt-floated',\r\n  styleUrl: 'floated.scss',\r\n  scoped: true,\r\n})\r\nexport class Floated {\r\n  @Element() hostEl!: HTMLElement;\r\n  private titleSlotEl!: HTMLSlotElement;\r\n\r\n  observer;\r\n\r\n  observeImageSrcChange(imgElement, callback) {\r\n    console.log(imgElement);\r\n    if (!(imgElement instanceof HTMLImageElement)) {\r\n      throw new Error('Target must be an <img> element');\r\n    }\r\n\r\n    this.observer = new MutationObserver(mutations => {\r\n      mutations.forEach(mutation => {\r\n        if (mutation.type === 'attributes' && mutation.attributeName === 'src') {\r\n          callback(imgElement.src);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.observer.observe(imgElement, {\r\n      attributes: true, // watch attributes\r\n      attributeFilter: ['src'], // only watch src\r\n    });\r\n\r\n    return this.observer; // so you can later disconnect if needed\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.titleSlotEl) {\r\n      const nodes = this.titleSlotEl.assignedElements({ flatten: true });\r\n      const img = nodes[0];\r\n\r\n      this.observeImageSrcChange(img, newSrc => {\r\n        this.hostEl.style.setProperty('--mt-imagem-floated-image', newSrc);\r\n      });\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class=\"mt-floated\">\r\n        <div>\r\n          <slot\r\n            name=\"image\"\r\n            ref={el => (this.titleSlotEl = el as HTMLSlotElement)}\r\n          ></slot>\r\n          <slot name=\"text\"></slot>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}